# translates a game generated by sample() in train.py into PGN that can be inserted into lichess analysis board

import chess
import chess.pgn
import io

def convert_to_pgn(input_text):
    """
    Converts chess moves with metadata into PGN format suitable for Lichess analysis.
    
    Parameters:
        input_text (str): Input string containing move data in the specified format.
        
    Returns:
        str: PGN formatted string.
    """
    # Split input into lines
    lines = input_text.strip().split("\n")

    # Extract moves from each line
    moves = []
    for i, line in enumerate(lines):
        parts = line.split()
        if i % 2 == 0: # even
            white_move = parts[1]
        else: # odd 
            black_move = parts[1]
            moves.append(str((i + 1)//2) + '. ' + white_move + ' ' + black_move + ' ')

    # Combine moves into PGN body
    pgn_moves = "".join(moves)

    # Combine header and moves
    return pgn_moves

def uci_string_to_pgn(uci_moves_string, event_name="?", site="?", date="?", 
                      round_num="?", white="?", black="?"):

    # 1) Extract only the UCI moves (stripping out the move numbers, periods, etc.).
    #    Each UCI move is typically 4 or 5 characters long (e.g. 'e2e4', 'e7e8Q').
    #    The input might look like "1. d2d4 e7e6 2. e2e4 d7d6 3. b1c3 ..." etc.
    #    So we can split by whitespace and filter out numeric tokens and punctuation.
    
    tokens = uci_moves_string.split()
    uci_moves = []
    for token in tokens:
        # A rough way to filter out move numbers ("1.", "2.") 
        # is to check if the token has letters/digits in typical UCI format.
        # We'll ignore anything that looks like "1.", "2.", "3." etc.
        if "." in token:  
            # skip tokens like "1.", "2."
            continue
        # Otherwise assume it's a move in UCI format (like 'd2d4', 'e7e6', etc.)
        uci_moves.append(token)

    # 2) Initialize an empty board and a PGN game
    board = chess.Board()
    game = chess.pgn.Game()
    game.headers["Event"] = event_name
    game.headers["Site"] = site
    game.headers["Date"] = date
    game.headers["Round"] = round_num
    game.headers["White"] = white
    game.headers["Black"] = black

    # We'll build the game node by node
    node = game

    # 3) For each UCI move, parse it, apply it on the board, and add the move to the PGN
    for move_uci in uci_moves:
        move = board.parse_uci(move_uci)
        node = node.add_variation(move)
        board.push(move)

    # 4) Convert the entire game to PGN (with SAN moves automatically included)
    pgn_io = io.StringIO()
    exporter = chess.pgn.FileExporter(pgn_io)
    game.accept(exporter)
    pgn_string = pgn_io.getvalue()

    return pgn_string


# Example usage
input_text = """1 e2e4 0.5 P1 win: 0.57, draw: 0.09, P1 loss: 0.33
2 e7e5 0.5 P1 win: 0.53, draw: 0.08, P1 loss: 0.39
3 g1f3 1 P1 win: 0.52, draw: 0.05, P1 loss: 0.43
4 b8c6 1 P1 win: 0.50, draw: 0.06, P1 loss: 0.44
5 f1c4 1 P1 win: 0.50, draw: 0.05, P1 loss: 0.44
6 g8f6 2 P1 win: 0.51, draw: 0.05, P1 loss: 0.43
7 f3g5 1 P1 win: 0.52, draw: 0.05, P1 loss: 0.43
8 d7d5 7 P1 win: 0.49, draw: 0.05, P1 loss: 0.46
9 e4d5 2 P1 win: 0.53, draw: 0.04, P1 loss: 0.43
10 f6d5 1 P1 win: 0.53, draw: 0.05, P1 loss: 0.43
11 d1f3 7 P1 win: 0.51, draw: 0.04, P1 loss: 0.45
12 d8g5 7 P1 win: 0.54, draw: 0.04, P1 loss: 0.42
13 c4d5 3.5 P1 win: 0.58, draw: 0.04, P1 loss: 0.38
14 c8e6 7 P1 win: 0.55, draw: 0.04, P1 loss: 0.41
15 d5c6 7 P1 win: 0.57, draw: 0.04, P1 loss: 0.39
16 b7c6 7 P1 win: 0.40, draw: 0.04, P1 loss: 0.56
17 f3c6 1 P1 win: 0.66, draw: 0.03, P1 loss: 0.30
18 e6d7 7 P1 win: 0.34, draw: 0.04, P1 loss: 0.62
19 c6a8 2 P1 win: 0.67, draw: 0.03, P1 loss: 0.30
20 e8e7 3.5 P1 win: 0.30, draw: 0.05, P1 loss: 0.66
21 e1g1 7 P1 win: 0.62, draw: 0.02, P1 loss: 0.36
22 d7h3 7 P1 win: 0.35, draw: 0.03, P1 loss: 0.62
23 d2d3 12 P1 win: 0.68, draw: 0.02, P1 loss: 0.30
24 g5g2 12 P1 win: 0.27, draw: 0.03, P1 loss: 0.70
25 a8g2 3.5 P1 win: 0.65, draw: 0.04, P1 loss: 0.31
26 h3g2 1 P1 win: 0.21, draw: 0.05, P1 loss: 0.74
27 g1g2 1 P1 win: 0.61, draw: 0.08, P1 loss: 0.31
28 f7f6 3.5 P1 win: 0.29, draw: 0.06, P1 loss: 0.65
29 b1c3 3.5 P1 win: 0.55, draw: 0.09, P1 loss: 0.36
30 e7e6 2 P1 win: 0.27, draw: 0.07, P1 loss: 0.66
31 c3b5 7 P1 win: 0.53, draw: 0.09, P1 loss: 0.37
32 f8c5 3.5 P1 win: 0.29, draw: 0.09, P1 loss: 0.63
33 b5c7 3.5 P1 win: 0.55, draw: 0.12, P1 loss: 0.34
34 e6d6 3.5 P1 win: 0.09, draw: 0.07, P1 loss: 0.84
35 c7b5 7 P1 win: 0.74, draw: 0.11, P1 loss: 0.15
36 d6c6 2 P1 win: 0.10, draw: 0.07, P1 loss: 0.83
37 b5c3 7 P1 win: 0.74, draw: 0.12, P1 loss: 0.14
38 c5d4 3.5 P1 win: 0.09, draw: 0.06, P1 loss: 0.85
39 c3e4 3.5 P1 win: 0.78, draw: 0.09, P1 loss: 0.13
40 f6f5 7 P1 win: 0.10, draw: 0.06, P1 loss: 0.84
41 e4g5 7 P1 win: 0.79, draw: 0.08, P1 loss: 0.12
42 h7h6 3.5 P1 win: 0.10, draw: 0.06, P1 loss: 0.84
43 g5f7 3.5 P1 win: 0.81, draw: 0.08, P1 loss: 0.11
44 h8f8 3.5 P1 win: 0.12, draw: 0.07, P1 loss: 0.82
45 c2c3 12 P1 win: 0.66, draw: 0.10, P1 loss: 0.23
46 f8f7 7 P1 win: 0.09, draw: 0.06, P1 loss: 0.85
47 c3d4 1 P1 win: 0.77, draw: 0.10, P1 loss: 0.13
48 e5d4 1 P1 win: 0.09, draw: 0.08, P1 loss: 0.83
49 c1d2 3.5 P1 win: 0.79, draw: 0.10, P1 loss: 0.11
50 f5f4 3.5 P1 win: 0.08, draw: 0.07, P1 loss: 0.85
51 a1c1 3.5 P1 win: 0.78, draw: 0.10, P1 loss: 0.11
52 c6d5 2 P1 win: 0.09, draw: 0.09, P1 loss: 0.82
53 f2f3 7 P1 win: 0.75, draw: 0.11, P1 loss: 0.14
54 g7g5 3.5 P1 win: 0.09, draw: 0.08, P1 loss: 0.82
55 f1e1 7 P1 win: 0.76, draw: 0.10, P1 loss: 0.14
56 h6h5 7 P1 win: 0.11, draw: 0.08, P1 loss: 0.81
57 e1e4 7 P1 win: 0.76, draw: 0.11, P1 loss: 0.14
58 g5g4 7 P1 win: 0.12, draw: 0.09, P1 loss: 0.80
59 f3g4 3.5 P1 win: 0.77, draw: 0.11, P1 loss: 0.13
60 h5g4 2 P1 win: 0.11, draw: 0.11, P1 loss: 0.78
61 e4f4 7 P1 win: 0.77, draw: 0.12, P1 loss: 0.11
62 f7f4 3.5 P1 win: 0.08, draw: 0.11, P1 loss: 0.81
63 d2f4 1 P1 win: 0.84, draw: 0.12, P1 loss: 0.04
64 d5e6 3.5 P1 win: 0.05, draw: 0.14, P1 loss: 0.81
65 c1c7 3.5 P1 win: 0.85, draw: 0.11, P1 loss: 0.04
66 e6f5 2 P1 win: 0.06, draw: 0.15, P1 loss: 0.79
67 c7a7 2 P1 win: 0.82, draw: 0.14, P1 loss: 0.04
68 f5f4 1 P1 win: 0.06, draw: 0.18, P1 loss: 0.76
69 a7a4 1 P1 win: 0.83, draw: 0.13, P1 loss: 0.04
70 f4e3 1 P1 win: 0.05, draw: 0.19, P1 loss: 0.75
71 g2g3 3.5 P1 win: 0.73, draw: 0.19, P1 loss: 0.08
72 e3d3 1 P1 win: 0.04, draw: 0.20, P1 loss: 0.76
73 g3g4 1 P1 win: 0.75, draw: 0.21, P1 loss: 0.05
74 d3c2 1 P1 win: 0.07, draw: 0.31, P1 loss: 0.62
75 a4d4 1 P1 win: 0.75, draw: 0.22, P1 loss: 0.03
76 c2b2 1 P1 win: 0.01, draw: 0.31, P1 loss: 0.68
77 a2a4 1 P1 win: 0.74, draw: 0.24, P1 loss: 0.02
78 b2b3 1 P1 win: 0.01, draw: 0.25, P1 loss: 0.73
79 a4a5 1 P1 win: 0.79, draw: 0.19, P1 loss: 0.01
80 b3c3 1 P1 win: 0.01, draw: 0.20, P1 loss: 0.79
81 a5a6 1 P1 win: 0.79, draw: 0.19, P1 loss: 0.02
82 c3d4 1 P1 win: 0.01, draw: 0.29, P1 loss: 0.69
83 a6a7 1 P1 win: 0.66, draw: 0.32, P1 loss: 0.01
84 d4c5 1 P1 win: 0.01, draw: 0.32, P1 loss: 0.67
85 a7a8q 1 P1 win: 0.64, draw: 0.35, P1 loss: 0.01
86 c5d4 1 P1 win: 0.01, draw: 0.26, P1 loss: 0.73
87 h2h4 1 P1 win: 0.75, draw: 0.24, P1 loss: 0.01
88 d4e5 1 P1 win: 0.01, draw: 0.27, P1 loss: 0.72
89 h4h5 1 P1 win: 0.78, draw: 0.21, P1 loss: 0.01
90 e5f6 1 P1 win: 0.01, draw: 0.28, P1 loss: 0.71
91 h5h6 1 P1 win: 0.77, draw: 0.22, P1 loss: 0.01
92 f6g6 1 P1 win: 0.01, draw: 0.32, P1 loss: 0.67
93 a8a6 1 P1 win: 0.71, draw: 0.28, P1 loss: 0.01
94 g6h7 1 P1 win: 0.00, draw: 0.32, P1 loss: 0.68
95 g4h5 1 P1 win: 0.75, draw: 0.24, P1 loss: 0.01
96 h7h8 2 P1 win: 0.00, draw: 0.29, P1 loss: 0.70
97 h5g6 2 P1 win: 0.77, draw: 0.23, P1 loss: 0.01
98 h8g8 1 P1 win: 0.00, draw: 0.30, P1 loss: 0.69
99 h6h7 1 P1 win: 0.81, draw: 0.19, P1 loss: 0.00
100 g8h8 1 P1 win: 0.01, draw: 0.40, P1 loss: 0.59
101 a6a8 3.5 P1 win: 0.77, draw: 0.22, P1 loss: 0.01"""  # Add the rest of the moves as needed

# Convert and print PGN format
pgn_output = convert_to_pgn(input_text)

print(uci_string_to_pgn(pgn_output))

